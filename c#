namespace calculator
{
    class program
    {
        public static string FindRightNumbers(int operantIndex, string input)
        {
            string rightnum = "";
            for (int i = operantIndex + 1; i < input.Length; i++)
            {
                if (char.IsDigit(input[i]))
                {

                    rightnum = rightnum + input[i];
                }
                else { break; }
            }
            return rightnum;
        }

        public static string FindLeftNumbers(int operantIndex, string input)
        {

            string leftnum = "";
            for (int i = operantIndex - 1; i >= 0; i--)
            {
                if (char.IsDigit(input[i]))
                {

                    leftnum = input[i] + leftnum;


                }
                else
                {
                    break;
                }
            }
            return leftnum;
        }


        public static void Main(string[] args)
        {
            Console.WriteLine("enter numbers ");
            string input = Console.ReadLine();

            input = paranthese(input);

            input = rechnungDurchlaufen(input, new[] { '*', '/' });

            input = rechnungDurchlaufen(input, new[] { '+', '-' });

            

            Console.WriteLine(input);

        }
        public static string rechnungDurchlaufen(string input, char[] liste)
        {


            int result = 0;
            for (int operantIndex = 0; operantIndex < input.Length; operantIndex++)
            {
                char oper = input[operantIndex];
                if (liste.Contains(oper))
                {
                    int num1 = Convert.ToInt32(FindRightNumbers(operantIndex, input));
                    int num2 = Convert.ToInt32(FindLeftNumbers(operantIndex, input));
                    string num1Length = FindRightNumbers(operantIndex, input);
                    string num2Length = FindLeftNumbers(operantIndex, input);
                    result = Calculate(num2, num1, oper);
                    string replaceNum = input.Substring(operantIndex + 1 + num1Length.Length);
                    string replaceNum1 = input.Substring(0, operantIndex - num2Length.Length);
                    input = replaceNum1 + result + replaceNum;
                    operantIndex = 0;
                }
            }
            return input;
        }

        public static string paranthese(string input)
        {


            while (input.Contains("("))
            {
                int startIndex = input.LastIndexOf("(");
                int endIndex = nestedP(input, startIndex);
                                                
                if (startIndex> 0 && char.IsDigit(input[startIndex - 1]))
                {
                    input = input.Insert(startIndex, "*");
                }
                if (endIndex+1<input.Length  && char.IsDigit(input[endIndex + 1]))
                {
                    input = input.Insert(endIndex + 1, "*");
                }


                if (startIndex >= 0 && endIndex >= 0)
                {

                    int length = (endIndex - 1) - (startIndex + 1) + 1;
                    string p = input.Substring(startIndex + 1, length);
                    string finalR = rechnungDurchlaufen(p, new[] { '*' ,'/'});
                    finalR = rechnungDurchlaufen(finalR, new[] { '+', '-' });
                    input = input.Remove(startIndex, endIndex - startIndex + 1).Insert(startIndex, finalR);
                   
                }
            }

            return input;
        }
        public static int nestedP(string input, int startIndex)
        {

            for (int i = startIndex; i < input.Length; i++)
            {

                if (input[i] == ')')
                {

                    return i;

                }
            }
            return 0;
        }
        public static int Calculate(int num1, int num2, char operant)
        {

            //Evaluate operant to determine which calculation to run
            int result = 0;
            switch (operant)
            {

                case '+':
                    result = num1 + num2;
                    break;
                case '-':
                    result = num1 - num2;
                    break;
                case '*':

                    result = num1 * num2;
                    break;
                case '/':
                    result = num1 / num2;
                    break;

            }
            return result;
        }
    }
}
